>head(x)
head(x)
con<- url("http://www.jhsph.edu", "r")
x<- readLines(con)
head(x)
?lapply(list, function)
?lapply()
?lapply()
mergedData2<-merge(reviews,solutions,by.x="solution_id",by.y="id",all=TRUE)
par(mar=c(0,0,0,0))
x<-rnorm(12,mean=rep(1:3,each=4),sd=0.2)
text(x+0.05,y+0.05,labels=as.character(1:12))
# reviews[1,1:6]
set.seed(1234)
par(mar=c(0,0,0,0))
x<-rnorm(12,mean=rep(1:3,each=4),sd=0.2)
y<-rnorm(12,mean=rep(c(1,2,1),each=4),sd=0.2)
plt(x,y,col="blue",pch=19,cex=2)
text(x+0.05,y+0.05,labels=as.character(1:12))
set.seed(1234)
par(mar=c(0,0,0,0))
x<-rnorm(12,mean=rep(1:3,each=4),sd=0.2)
y<-rnorm(12,mean=rep(c(1,2,1),each=4),sd=0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05,y+0.05,labels=as.character(1:12))
B <- 1000
n <- length(gmVol)
resamples <- matrix(sample(gmVol, n*B, replace=TRUE), B, n)
library(caret)
library(ggplot2)
search
install.packages("ggplot2")
library(ggplot2)
search
search()
install.packages("devtools")
library(devtools)
search()
install.packages("caret")
library(caret)
search()
install.packages("kernlab")
install.packages("KernSmooth")
library(KernSmooth)
x<-1
print(x)
x
msg <-"hello"
x <- ##Incomplete expression
w
x <- ## Incomplete expression
msg
x <- 1:20
x
install.packages("swirl")
library(swirl)
library(swirl)
ls()
swirl()
clear()
clean()
vector()
makeCacheMatrix <- function(x = matrix()){
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
my_matrix <- makeCacheMatrix(matrix(1:4,2,2))
my_matrix
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve <- function(x, ...){
inv <- x$getInverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$getInverse()
inv <- inverse(data, ...)
x$setInverse(inv)
inv
}
cacheSolve(my_matrix)
cacheSolve(my_matrix)
makeCacheMatrix <- function(x = matrix()){
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
cacheSolve <- function(x, ...){
inv <- x$getInverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$getInverse()
inv <- solve(data, ...)
x$setInverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4,2,2))
my_matrix$get()
my_matrix$getInverse()
my_matrix$get()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
cacheSolve <- function(x, ...){
inv <- x$getInverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data2 <- x$getInverse()
inv <- solve(data2, ...)
x$setInverse(inv)
inv
}
cacheSolve(my_matrix)
cacheSolve <- function(x, ...){
inv <- x$getInverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data2 <- x$get()
inv <- solve(data2, ...)
x$setInverse(inv)
inv
}
cacheSolve(my_matrix)
my_matrix$getInverse()
cacheSolve(my_matrix)
my_matrix$getInverse()
